plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.cloudtunes'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

sonar {
	properties {
		property("sonar.projectKey", "PROJECT_KEY")
		property("sonar.organization", "ORGANIZATION_KEY")
		property("sonar.host.url", "HOST_URL")
	}

	dependencies {
		//Implementations
		implementation 'com.google.code.findbugs:jsr305:3.0.2'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
		implementation 'org.springframework.boot:spring-boot-starter-websocket'
		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
		testImplementation 'org.projectlombok:lombok'
		testImplementation 'org.apache.httpcomponents.client5:httpclient5'
		implementation 'org.modelmapper:modelmapper:2.4.4'

		//Compile only
		compileOnly 'org.projectlombok:lombok'


		//Annotation processor
		annotationProcessor 'org.projectlombok:lombok'

		//Test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'

		//Database
		runtimeOnly 'org.postgresql:postgresql'
	}


	tasks.named('test') {
		useJUnitPlatform()
	}

	tasks.register("buildForMac") {
		group = "build"
		description = "Builds the application for both ARM64 and x86_64 architectures on macOS."

		doLast {
			def outputDir = file("$buildDir/mac-build")
			outputDir.mkdirs()

			def architectures = ["x86_64", "arm64"]
			architectures.each { arch ->
				def output = file("${outputDir}/mac-${arch}")
				output.mkdirs()

				println "Building for macOS $arch..."
				exec {
					workingDir = projectDir
					commandLine = [
							"javac", "-d", output, "-source", "17", "-target", "17",
					]
					environment("ARCH", arch)
				}
			}

			println "Build complete. Output available in $outputDir."
		}
	}
}