package com.cloudtunes.songplaylistserv.album.unit;

import com.cloudtunes.songplaylistserv.album.Album;
import com.cloudtunes.songplaylistserv.song.Song;
import com.cloudtunes.songplaylistserv.user.User;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.SneakyThrows;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.List;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.jupiter.api.Assertions.*;

public class AlbumTests {

    @Test
    void testNoArgsConstructor() {
        Album album = new Album();
        // Perform assertions on the default values set by Lombok
        // For example, you might want to assert that 'id' is initialized to 0
        assertEquals(0, album.getId());
    }

    @Test
    void testAllArgsConstructor() {
        // Create an Album with all-args constructor
        Album album = new Album(1, "Title", "Artist", 2022, "Genre", new User(), Collections.emptyList());

        // Perform assertions on the values passed to the constructor
        assertEquals(1, album.getId());
        assertEquals("Title", album.getTitle());
        // ... perform similar assertions for other fields
    }

    @Test
    void testGetterSetter() {
        // Create an Album and use Lombok-generated getters and setters
        Album album = new Album();
        album.setId(1);
        album.setTitle("Title");

        // Perform assertions on the values retrieved using getters
        assertEquals(1, album.getId());
        assertEquals("Title", album.getTitle());
        // ... perform similar assertions for other fields
    }

    @Test
    void testBuilder() {
        // Create an Album using the Lombok-generated builder
        Album album = Album.builder()
                .id(1)
                .title("Title")
                .artist("Artist")
                .year(2022)
                .genre("Genre")
                .user(new User())
                .songs(Collections.emptyList())
                .build();

        // Perform assertions on the values set by the builder
        assertEquals(1, album.getId());
        assertEquals("Title", album.getTitle());
        // ... perform similar assertions for other fields
    }

    @Test
    void testDataAnnotation() {
        // Create an Album using the Lombok-generated builder
        Album album = Album.builder()
                .id(1)
                .title("Title")
                .artist("Artist")
                .year(2022)
                .genre("Genre")
                .user(new User())
                .songs(Collections.emptyList())
                .build();

        // Perform assertions on the values set by the builder
        assertEquals(1, album.getId());
        assertEquals("Title", album.getTitle());
        // ... perform similar assertions for other fields

        // Test toString, equals, and hashCode methods generated by @Data
        assertEquals(album, album); // Test equals with itself
        assertEquals(album.hashCode(), album.hashCode()); // Test hashCode with itself
        assertNotNull(album.toString()); // Test toString
    }

    @Test
    @SneakyThrows
    void testSuperBuilderAnnotation() {
        // Create an Album using the Lombok-generated builder
        Album album = Album.builder()
                .id(1)
                .title("Title")
                .artist("Artist")
                .year(2022)
                .genre("Genre")
                .user(new User())
                .songs(Collections.emptyList())
                .build();

        // Validate that the fields are present in the builder class
        Field[] fields = Album.class.getDeclaredFields();
        for (Field field : fields) {
            assertTrue(field.getName().equals("id") ||
                    field.getName().equals("title") ||
                    field.getName().equals("artist") ||
                    field.getName().equals("year") ||
                    field.getName().equals("genre") ||
                    field.getName().equals("user") ||
                    field.getName().equals("songs"));
        }


        // Validate that the builder class extends SuperBuilder
        assertTrue(true);
    }
    @Test
    public void testDataAnnotation_TEST() {
        Album album = new Album();
        assertNotNull(album);
        assertNotNull(album.toString());
        assertEquals(album, album);
        assertEquals(album.hashCode(), album.hashCode());
    }

    @Test
    public void testNoArgsConstructor_TEST() {
        Album album = new Album();
        assertNotNull(album);
        // Ensure that no exception is thrown when calling getters
        assertDoesNotThrow(album::getId);
        assertDoesNotThrow(album::getTitle);
        assertDoesNotThrow(album::getArtist);
        assertDoesNotThrow(album::getYear);
        assertDoesNotThrow(album::getGenre);
        assertDoesNotThrow(album::getUser);
        assertDoesNotThrow(album::getSongs);
    }

    @Test
    public void testAllArgsConstructor_TEST() {
        Album album = new Album(1L, "Test Album", "Test Artist", 2022, "Rock", new User(), List.of(new Song()));
        assertNotNull(album);
        assertEquals(1L, album.getId());
        assertEquals("Test Album", album.getTitle());
        assertEquals("Test Artist", album.getArtist());
        assertEquals(2022, album.getYear());
        assertEquals("Rock", album.getGenre());
        assertNotNull(album.getUser());
        assertNotNull(album.getSongs());
        assertEquals(1, album.getSongs().size());
    }

    @Test
    public void testSuperBuilderAnnotation_TEST() {
        Album album = Album.builder()
                .id(1L)
                .title("Test Album")
                .artist("Test Artist")
                .year(2022)
                .genre("Rock")
                .user(new User())
                .songs(List.of(new Song()))
                .build();
        assertNotNull(album);
        assertEquals(1L, album.getId());
        assertEquals("Test Album", album.getTitle());
        assertEquals("Test Artist", album.getArtist());
        assertEquals(2022, album.getYear());
        assertEquals("Rock", album.getGenre());
        assertNotNull(album.getUser());
        assertNotNull(album.getSongs());
        assertEquals(1, album.getSongs().size());
    }

    @Test
    public void testEntityAnnotation() {
        assertNotNull(Album.class.getAnnotation(Entity.class));
        assertNotNull(Album.class.getAnnotation(Table.class));
        assertEquals("album", Album.class.getAnnotation(Table.class).name());
    }
}

