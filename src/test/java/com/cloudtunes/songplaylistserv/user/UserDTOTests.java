package com.cloudtunes.songplaylistserv.user;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class UserDTOTests {

    @Test
    public void testNoArgsConstructor() {
        UserDTO userDTO = new UserDTO();
        assertNotNull(userDTO);
    }

    @Test
    public void testAllArgsConstructor() {
        UserDTO userDTO = new UserDTO(1L, "john_doe", "password123", "john@example.com", "USER");
        assertEquals(1L, userDTO.getId());
        assertEquals("john_doe", userDTO.getUsername());
        assertEquals("password123", userDTO.getPassword());
        assertEquals("john@example.com", userDTO.getEmail());
        assertEquals("USER", userDTO.getRole());
    }

    @Test
    public void testGettersAndSetters() {
        UserDTO userDTO = new UserDTO();

        userDTO.setId(2L);
        assertEquals(2L, userDTO.getId());

        userDTO.setUsername("jane_doe");
        assertEquals("jane_doe", userDTO.getUsername());

        userDTO.setPassword("new_password");
        assertEquals("new_password", userDTO.getPassword());

        userDTO.setEmail("jane@example.com");
        assertEquals("jane@example.com", userDTO.getEmail());

        userDTO.setRole("ADMIN");
        assertEquals("ADMIN", userDTO.getRole());
    }

    @Test
    public void testBuilder() {
        UserDTO userDTO = UserDTO.builder()
                .id(3L)
                .username("bob")
                .password("bob_password")
                .email("bob@example.com")
                .role("MODERATOR")
                .build();

        assertEquals(3L, userDTO.getId());
        assertEquals("bob", userDTO.getUsername());
        assertEquals("bob_password", userDTO.getPassword());
        assertEquals("bob@example.com", userDTO.getEmail());
        assertEquals("MODERATOR", userDTO.getRole());
    }

    @Test
    public void testToString() {
        UserDTO userDTO = UserDTO.builder()
                .id(4L)
                .username("sam")
                .password("sam_password")
                .email("sam@example.com")
                .role("USER")
                .build();

        String expectedToString = "UserDTO(id=4, username=sam, password=sam_password, email=sam@example.com, role=USER)";
        assertEquals(expectedToString, userDTO.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        UserDTO userDTO1 = new UserDTO(5L, "user1", "pass1", "user1@example.com", "USER");
        UserDTO userDTO2 = new UserDTO(5L, "user1", "pass1", "user1@example.com", "USER");

        assertEquals(userDTO1, userDTO2);
        assertEquals(userDTO1.hashCode(), userDTO2.hashCode());
    }

    @Test
    public void testDataAnnotation() {
        UserDTO userDTO1 = UserDTO.builder()
                .id(1L)
                .username("john_doe")
                .password("password123")
                .email("john@example.com")
                .role("USER")
                .build();

        UserDTO userDTO2 = UserDTO.builder()
                .id(1L)
                .username("john_doe")
                .password("password123")
                .email("john@example.com")
                .role("USER")
                .build();

        // Test equals method generated by Lombok
        assertEquals(userDTO1, userDTO2);

        // Test hashCode method generated by Lombok
        assertEquals(userDTO1.hashCode(), userDTO2.hashCode());

        // Test toString method generated by Lombok
        String expectedToString = "UserDTO(id=1, username=john_doe, password=password123, email=john@example.com, role=USER)";
        assertEquals(expectedToString, userDTO1.toString());
    }
}

